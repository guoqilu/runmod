#!/bin/bash
#
funHelp(){
echo "USAGE: 
    Sourcing this script will setup a terminal, create, update or remove a WorkSpace for a given project.
	The default operation is for the area to be re-populated with the latest project scirpts and libraries.
	The script can be sourced from any area and will operate on the WS in /data/proj/$USER/project/type/rev.
	
    -project <project>     REQUIRED: Project name
    -type   <Chip type>    REQUIRED: Chip type (eic or pic)
    [-update]              OPTIONAL: SOS area to be re-populated with the latest project scirpts and libraries.
    [-create]              OPTIONAL: Create new WS and an SOS checkout will take place (if applicable).
                                     New directory will be created or existing dir overwritten!
                                     CAUTION! Existing checkout will be deleted!
    [-dir <path>]          OPTIONAL: Local working area, eg /data/proj/$USER/compass_feas/
                                     PROJECT/REV will be appended to any DIR specified!
                                     WS will be dir/project/rev
    [-rev <pass>]          OPTIONAL: Default module will be loaded.  Use \"module avail PROJECT\" to see default
    [-server <SOS server>] OPTIONAL: Default server will be used if not passed [ $SOS_SERVER_PIC ].
    [-clean]               OPTIONAL: Remove unmanaged files when WS is recreated.
    [-remove]              OPTIONAL: Removes WS from SOS.
    [-force]               OPTIONAL: Forces removal of WS from SOS.
    
    Full Build Example:               source user_setup.rc -project compass -type pic -create
    Full Build Example in custom dir: source user_setup.rc -project compass -type pic -create -dir /data/proj/$USER/compass_feas/
    Update existing WS Example:       source user_setup.rc -project compass -type pic
    Removing existing WS Example:     source user_setup.rc -project compass -type pic -remove

"
}

funCreateCdsLib(){
	if [ -f "$dir/cds/run/cds.lib" ]; then
		echo "*** INFO: User library file exists --> $dir/cds/run/cds.lib";
		echo "Please verify this file is correct";
	else
		if [ -d "$dir/cds/run" ]; then
			echo "Creating control libraries --> $dir/cds/run/cds.lib";

			#******* add required libraries to the cds.lib ***********
			echo "#******* Include all SOS control libraries ***********" > $dir/cds/run/cds.lib
			echo "INCLUDE $dir/cds/run/sos.lib" >> $dir/cds/run/cds.lib
			echo "" >> $dir/cds/run/cds.lib

			echo "#******* add required libraries to the cds.lib ***********" >> $dir/cds/run/cds.lib
			echo "DEFINE opticalLib $CADENCE_DIR/$CDSBASE/tools.lnx86/dfII/etc/cdslib/opticalLib" >> $dir/cds/run/cds.lib
			echo "DEFINE analogLib  $CADENCE_DIR/$CDSBASE/tools.lnx86/dfII/etc/cdslib/artist/analogLib" >> $dir/cds/run/cds.lib
			echo "DEFINE basic      $CADENCE_DIR/$CDSBASE/tools.lnx86/dfII/etc/cdslib/basic" >> $dir/cds/run/cds.lib
			echo "" >> $dir/cds/run/cds.lib
			if [ $chip_type == "pic" ];	then
				#foundry database 
				echo "#******* foundry database ***********" >> $dir/cds/run/cds.lib
				echo "DEFINE $FOUNDRY_PIC"_"$PROCESS_PIC"_"$TF_REV_PIC  /bos/foundry/$FOUNDRY_PIC/$PROCESS_PIC/$TF_REV_PIC/cds/oa" >> $dir/cds/run/cds.lib
				echo "" >> $dir/cds/run/cds.lib

				#pic-pdk database 
				echo "#******* pic-pdk database ***********" >> $dir/cds/run/cds.lib
				echo "INCLUDE  /data/proj/$project/$chip_type/$CHIP_REV_PIC/pic_pdk/latest/imec_nhanced_n130/sos.lib" >> $dir/cds/run/cds.lib
				# echo "INCLUDE  /bos/pic_pdk/$FOUNDRY_PIC/$PROCESS_PIC/$LTPDK_REV_PIC/cds/oa/cds.lib" >> $dir/cds/run/cds.lib
				echo "" >> $dir/cds/run/cds.lib
			fi
		else
			echo "*** WARN: CDS run area does not exist--> $dir/cds/run";
		fi
	fi

}

funCreateCdsCollateral(){
	# create a ./CDS/run dir if it does not exist.  All CDS data will exist here
	if [ ! -d "$dir/cds/run" ]; then
		echo "Creating directory $dir/cds/run ...";
		mkdir -p $dir/cds/run;
	fi
	if [ ! -d "$dir/cds/run/logs" ]; then
		mkdir -p $dir/cds/run/logs;
		echo "Creating directory $dir/cds/logs ...";
	fi
	if [ -d "$dir/cds/run" ]; then
 		echo "updating privs in $dir/cds/run ...."
		chmod u+w -R $dir/cds/run*;
	fi
	#*******copy display.drf***********
	if [ -d "/bos/foundry/$FOUNDRY_PIC/$PROCESS_PIC/$TF_REV_PIC/cds/oa/display.drf" ]; then
		cp /bos/foundry/$FOUNDRY_PIC/$PROCESS_PIC/$TF_REV_PIC/cds/oa/display.drf $dir/cds/run/
	fi
	# Copy some tools for now.  Need to add to SOS or GIT
	echo "
WD = getWorkingDir()
info(\"Loading PROJECT customizations from *** %s/.cdsinit *** ....\n\" WD)
let( (bindKeyFileList file path saveSkillPath)
    bindKeyFileList = '(
                 \"leBindKeys.il\" 
                 \"schBindKeys.il\"
                    )
    
;  this is the path that is searched for the files
    path = strcat(
              \"./skill   ~   . \"
              prependInstallPath(\"local \")
              prependInstallPath(\"samples/local\")
             )
	println(\"Updating skill path....\")
	println(path)
    saveSkillPath=getSkillPath()
    setSkillPath(path)
;
;
 
   foreach(file bindKeyFileList
       if(isFile(file) then
          loadi(file)
         )
    )
	setSkillPath(saveSkillPath)
)
" > $dir/cds/run/.cdsinit
if [ $chip_type == "pic" ];	then
echo " 
	info(\"Loading calibre cdsinit from *** /data/tools/mentor/calibre.cdsinit *** ....\n\" )
	loadi(\"/data/tools/mentor/calibre.cdsinit\")
	info(\"Completed loading calibre cdsinit from *** /data/tools/mentor/calibre.cdsinit *** ....\n\" )">> $dir/cds/run/.cdsinit 
fi
echo "
info(\"\tCompleted loading PROJECT customizations from ***%s/.cdsinit *** ....\n\" pwd())
let( (file) 
	file = sprintf(nil \"/data/proj/%s/ICFB/.cdsinit\" getShellEnvVar(\"USER\") )
	if(isFile(file) then
		info(\"**** Loading USER customizations from *** %s ....\n\" file)
		loadi(file)
		info(\"Completed Loading %s ****\n\" file)
	else
		info(\"USER customizations file %s does not exist\" file)
	)
) " >> $dir/cds/run/.cdsinit 

	
}

unset dir
unset chip_rev
unset chip_type
unset project
unset create
unset update
unset clean
unset remove
unset force
unset server
# Step through the arguments and set up the command
# Show usage and exit if unsupported swithes used
while [ -n "$(echo $1 |grep '-')" ]; do
	case $1 in
		-project ) 
			shift 
			project=$1;;
		-type ) 
			shift 
			chip_type=$1;;
		-rev ) 
			shift 
			chip_rev=$1;;
		-dir ) 
			shift 
			dir=$1;; 
		-server ) 
			shift 
			server=$1;; 
		-update ) 
			update=1;; 
		-create ) 
			create=1;; 
		-clean ) 
			clean=1;; 
		-remove ) 
			remove=1;; 
		-force ) 
			force=1;; 
		* ) 
			funHelp
			kill -INT $$;
	esac
	shift
done
##############################################################
## show usage and exit if both project and type are not set ##
##############################################################
if [ -z $project ] || [ -z $chip_type ]; then 
	funHelp
	echo " *** ERROR: Must pass -project and -type with appropriate arguments"
	kill -INT $$;
fi
if [ $PROJECT != "NONESET" ]; then

	if [ $project != "$PROJECT" ]; then
 	  	echo " *** ERROR: This terminal already is set up to PROJECT: $PROJECT REV: $CHIP_REV!"
  	 	echo " *** Please use a fresh terminal to set up to a new project."
  	 	kill -INT $$;
	fi
	if [ ! -z "$chip_rev" ]; then
		if  [ $chip_rev != "$CHIP_REV" ]; then
 	  		echo " *** ERROR: This terminal already is set up to PROJECT: $PROJECT REV: $CHIP_REV!"
  	 		echo " *** Please use a fresh terminal to set up to a new project."
  	 		kill -INT $$;
		fi
	fi
fi	
##############################################################
## Error out if update and create are both called           ##
##############################################################
if [ $update ] && [ $create ]; then
	funHelp
    echo " *** ERROR: -update and -create are mutually exclusive!  Please select only one!"
   	kill -INT $$;
fi
###############################################################
## Error out if update or create are used with remove option ##
###############################################################
if [ $remove ] ; then
	if  [ $create ] || [ $update ] ; then
		funHelp
    	echo " *** ERROR: -remove can't be used with -update or -create!  Please select only one!"
   		kill -INT $$;
	fi
fi
###############################################################
## Load common bashrc; FIXME: I am not sure if I need this!  ##
###############################################################
	# Set up and source the EDA setup
	if [[ -z "$EDA_CHECKOUT" ]]; then
	   export EDA_CHECKOUT=/tools/EDA
	fi
	source $EDA_CHECKOUT/env/common_bashrc.bash
	user="${USER:-default_value}"
###############################################################
## Find the module for the inputted project/rev and load it. ##
## if it does not exist warn and list avaible projects/revs  ##
###############################################################
	if [ ! -d "/data/tools/EDA/projects/$project" ]; then
    	echo ""
    	echo " *** ERROR: Unknown project $project, make sure that the module exists for the project!"
		echo "Available projects:"
		ls /data/tools/EDA/projects
    	kill -INT $$;
	fi
	if [ ! -z "$chip_rev" ]; then
		if [ -f "/data/tools/EDA/projects/$project/$chip_rev" ]; then
			echo "" 
			echo "Executing --> module load $project/$chip_rev"
			module load $project/$chip_rev
    	else
			echo ""
    		echo " *** ERROR: Unknown project rev $project/$chip_rev, make sure that the module exists for the project rev!"
    		module avail $project	
			kill -INT $$;
		fi
	else
		echo "" 
		echo "Executing --> module load $project"
		module load $project 
	fi
###############################################################
##   Check that a rev exists for the type, if not error out  ##
##   Project may have a specified rev, but not for all types ##
###############################################################
	# verify chip type is valid for project and complete set up. 1st PIC then EIC.
	if [ $chip_type == "pic" ];	then
		if [ -z $CHIP_REV_PIC ]; then 
			echo ""
    		echo " *** ERROR: Unknown PROJECT $project does not support CHIP TYPE $chip_type"
			kill -INT $$;
		fi
		echo "Setting up the terminal or creating workspace for:"
		echo " * Chip version: $CHIP_REV_PIC"
		echo " * Foundry: $FOUNDRY_PIC"
		echo " * Process: $PROCESS_PIC"
		echo " * Foundry pdk/techFile: $TF_REV_PIC"
		echo " * LTPDK version: $LTPDK_REV_PIC"
		echo " * SOS Server: $SOS_SERVER_PIC"
		echo " * SOS Project: $SOS_PROJECT_PIC"
		process=$PROCESS_PIC
		chip_rev=$CHIP_REV_PIC 
		sos_server=$SOS_SERVER_PIC 
		sos_project=$SOS_PROJECT_PIC 
	elif [ $chip_type == "eic" ]; then
		if [ -z $CHIP_REV_EIC ]; then 
			echo ""
    		echo " *** ERROR: Unknown PROJECT $project does not support CHIP TYPE $chip_type"
			kill -INT $$;
		fi
		echo "Setting up the terminal or creating workspace for:"
		echo " * Chip version: $CHIP_REV_EIC"
		echo " * Foundry: $FOUNDRY_EIC"
		echo " * Process: $PROCESS_EIC"
		echo " * SOS Server: $SOS_SERVER_EIC"
		echo " * SOS Project: $SOS_PROJECT_EIC"
		process=$PROCESS_EIC
		pdk_process=$PDK_PROCESS_EIC
		chip_rev=$CHIP_REV_EIC 
		sos_server=$SOS_SERVER_EIC 
		sos_project=$SOS_PROJECT_EIC 
	else
    	echo ""
    	echo " *** ERROR: Chip type must be pic or eic!"
    	kill -INT $$;
	fi
###############################################################
# check if compass.  Eventually we will merge all these to one#
###############################################################
	if [ $project  == "compass" ]; then
		mod=ph_icadvm201
	else
		mod=$process\_$chip_type
	fi
###############################################################
## module load the process module for this chip type         ##
###############################################################
	if [ ! -d "/data/tools/EDA/flows/$mod" ]; then
		echo " * WARN: Module $mod does not exist!"
	else
		echo ""
		echo " Executing --> module load  $mod"
		module load $mod
	fi
	# set up the global chip_rev for the chip_type we are building
	export CHIP_TYPE=$chip_type
	export CHIP_REV=$chip_rev
	export PROCESS=$pdk_process
###############################################################
#             create work area  							 ##
#															 ##
# if create option rebuild the full directory				 ##
# if create is not used simply update the WS				 ##
# if a directory is passed operate on the pass dir			 ##
# if no directory is passed operate in the default directory ##
###############################################################
if [ -z "$dir" ]; then
	#FIXME: check if compass.  Eventually we will merge all these to one
	if [ $project  == "compass" ]; then
		dir="/data/proj/$USER/$project/$chip_type/$chip_rev"
	else
		dir="/data/proj/$project/$chip_type/$chip_rev/user/$USER"	
	fi
else
	dir="$dir"
fi
###############################################################
## Describe setup after module load                          ##
###############################################################
	echo " * User: $user"
	echo " * Project: $project"
	echo " * Chip type: $chip_type"	
	echo " * Working dir: $dir"	
export WORK_AREA=$dir
###############################################################
# Remove SOS area                                            ##
###############################################################
if [ $remove ]; then
	if [ ! -d $dir ]; then
		echo " *** ERROR: Local working area does not exist!"
		echo " 	dir --> $dir"
    	kill -INT $$;
	fi	  
	echo "*** WARNING: $dir will be removed from SOS!"
	if [ $clean ]; then
		echo ""
		if [ $force ]; then
			echo "Executing --> soscmd deleteworkarea -U -F $dir";
			echo ""
			soscmd deleteworkarea -U -F $dir
		else
			echo "Executing --> soscmd deleteworkarea -U $dir";
			echo ""
			soscmd deleteworkarea -U  $dir
		fi
	else 
		echo "              Unmanaged files may remain.  Use -clean to remove unmanged files"  
		echo ""
		if [ $force ]; then
			echo "Executing --> soscmd deleteworkarea -F $dir";
			echo ""
			soscmd deleteworkarea  -F $dir
		else
			echo "Executing --> soscmd deleteworkarea $dir";
			echo ""
			soscmd deleteworkarea $dir
		fi
	fi
    kill -INT $$;
fi
###############################################################
# Create SOS area                                            ##
###############################################################
if [ $create ]; then
	if [ -d $dir ]; then
		if [ -d $dir/.SOS ]; then
			echo "workspace is already created. Do you want to recreate it? (y/n)"
			read yn
			shopt -s nocasematch
			while [[ $yn != y && $yn != "yes" ]] ; do
				echo "exiting..."
				kill -INT $$;
			done
		fi
		# cd $dir;	  
		if [ ! -d $dir/.SOS ]; then
			echo "*** WARNING $dir exists but does not appear to be a supported SOS WS."
			echo "            New SOS checkout will take place."
		else
			if [ $clean ]; then
				echo "Executing --> soscmd deleteworkarea -U $dir";
				soscmd deleteworkarea -U $dir
			else 
				echo "Executing --> soscmd deleteworkarea $dir";
				soscmd deleteworkarea $dir
				echo "Unmanaged files may remain.  Use -clean to remove unmanged files"  
			fi
		fi
	else
		echo "creating new WS $dir ...."
		mkdir -p $dir;
		# cd $dir;	  
	fi
	
	 if [ -z "$server" ]; then	
		 if [ -z $sos_server ]; then	
			echo " *** ERROR: SOS_SERVER global variable is not set!"
			echo "            Please use -server switch to define sos server."
			kill -INT $$;
		else
			server=$sos_server
		fi
	fi
	
	if [ -z "$sos_project" ]; then	
		echo " *** INFO: SOS_PROJCECT global variable is not set, using project name for sos build!"
		# echo "           Please use -server switch to define sos server."
		sos_project=$PROJET
	fi
	
	if [ $server ]; then
		#******make the work area as sos ***************
		echo ""
		echo "Executing --> soscmd newworkarea $server $sos_project $dir";
		soscmd newworkarea $server $sos_project $dir;  
		echo ""
		echo "Executing --> soscmd populate $dir  #poulates the whole tree";
		soscmd populate $dir   #poulates the whole tree
	else
		echo " *** ERROR: SOS server not exist!"
		kill -INT $$;
		
	fi
else
###############################################################
# Update SOS area                                            ##
###############################################################
	if [ $update ]; then
	# UPDATE
		if [ ! -d $dir ]; then
			echo " *** ERROR: Local working area does not exist!"
			echo " 	DIR --> $dir"
			echo " 	Please run full setup first!"
			echo " 	Example: user_setup.rc -project compass -type pic -dir /data/proj/$USER/compass/ -create"
    		kill -INT $$;
		else
			# cd $dir;	  
			if [ ! -d $dir/.SOS ]; then
				echo "*** WARNING $dir exists but does not appear to be a supported SOS WS."
				echo "	Please use the -create option to build this area."
				echo "	Example: user_setup.rc -project compass -type pic -dir /data/proj/$USER/compass/ -create"
				kill -INT $$;
			fi
			echo "";
			echo "Executing --> soscmd update -P $sos_project $dir   #Updates the whole tree";
			soscmd update -P $sos_project $dir
			if [ $clean ]; then
				echo ""
				echo "*** WARN -clean option does not work with update.  No files will be removed.";
				echo ""
			fi
		fi
	else
		if [ ! -d $dir ]; then
			echo " *** ERROR: Local working area does not exist!"
			echo " 	dir --> $dir"
   			kill -INT $$;
		fi
	fi	  
fi
#
# Include the type and rev on the path
#    Create the cds collateral.
if [ $update ] || [ $create ]; then
	if [ $chip_type == "pic" ];	then
		echo "generating CDS collateral --> funCreateCdsCollateral";
		funCreateCdsCollateral;
		#
		#    Create the cds.lib and cp the display.drf.
		#	 We need to move this out of here.....
		# unset our local vars to prevent pollution of the executing shell
	fi
	# echo "generating CDS.lib  --> funCreateCdsLib";
	funCreateCdsLib
fi
export PROJECT_CDS_LIB="/data/proj/$project/$chip_type/$chip_rev/user/$USER/cds/run/cds.lib"
echo " * cds_lib: $PROJECT_CDS_LIB";
echo ""
